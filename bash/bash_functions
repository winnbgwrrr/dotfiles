# .bash_functions

_ps1_branch() {
  git rev-parse 2>/dev/null || return 0
  echo " ($(git symbolic-ref --short -q HEAD ||
    echo "($(git rev-parse --short HEAD)...)"))"
}

_notes() {
  local usrin lastopt
  printf '%s\n' 'NOTES'
  declare -a optslist
  optslist=('Select one of the following options:')
  optslist+=('ssh cat')
  optslist+=('change shell')
  optslist+=('sed block')
  optslist+=('open ssl')
  optslist+=('shuf')
  optslist+=('passwd expiration')
  optslist+=('tmux pane formats')
  optslist+=('open history in vim')
  optslist+=('run command in history')
  optslist+=('output command in history')
  _display_menu "${optslist[@]}"
  lastopt=$((${#optslist[@]}-1))
  read -p "Enter Choice [1-$lastopt] " usrin
  tput setaf '2'
  case "$usrin" in
    1)
      printf '\n\t%s\n\n' '<<stdout>> | ssh usr@srv "cat > <file>"'
      ;;
    2)
      printf '\n\t%s\n\n' 'chsh -s /bin/bash'
      ;;
    3)
      printf '\n\t%s\n\n' "sed -n '/<begin>/,/<end>/p' <file>"
      ;;
    4)
      printf '\n\t%s\n' 'openssl genrsa -out ~/.ssl/id_rsa 4096'
      printf '\t%s\n' 'openssl rsa -in ~/.ssl/id_rsa -pubout -out ~/.ssl/id_rsa.pub'
      printf '\t%s\n' 'echo "<secret>" | openssl rsautl -encrypt -inkey ~/.ssl/rsa_key.pub -pubin -out <encrypted.file>'
      printf '\t%s\n\n' 'openssl rsautl -decrypt -inkey ~/.ssl/id_rsa -in <encrypted.file>'
      ;;
    5)
      printf '\n\t%s\n\n' "shuf -n <file> ><output>"
      ;;
    6)
      printf '\n\t%s' "chage -l \$USER"
      printf '\n\t%s\n\n' "SELECT username, expiry_date FROM dba_users WHERE username = '<username>';"
      ;;
    7)
      printf '\n\t%s\n\n' "tmux list-panes -F '#{pane_index} #{pane_active} #{pane_pid}'"
      ;;
    8)
      printf '\n\t%s\n\n' "fc <num> [num]"
      ;;
    9)
      printf '\n\t%s\n\n' "!<!|num>"
      ;;
    10)
      printf '\n\t%s\n\n' "history -p \!<num>"
      ;;
    [Qq]*)
      echo
      ;;
    *)
      echo
      _print_error '%s\n' "$usrin $NOT_RECOGNIZED_OPTION"
      ;;
  esac
  tput setaf '7'
}

_fzf_vim() {
  local top_dir path
  top_dir=${1:-$HOME}
  path=$(find $top_dir -type f -not -path '*/.git*' | fzf)
  [ -z "$path" ] && return 0
  if file $(realpath $path) |
    grep -qe 'text' -e 'Zip archive' -e 'gzip compressed'
  then
    vim -b $path
  else
    _print_error "$path is not a text file"
    return 1
  fi
}

_reset_prompt() {
  local n
  n=${PS1@P}
  n=${n//[^$'\n']}
  n=${#n}
  tput cuu $((n + 1))
  tput ed
}

_home() {
  if [ -z "$TMUX" ]; then
    cd ~
  else
    cd ${workspaces[$(tmux display-message -p '#W')]}
  fi
}

_tmux_window() {
  local arg
  arg="${1:?}"
  [ -z "${workspaces[$arg]}" ] && return 1
  if [ -z "$TMUX" ]; then
    cd "${workspaces[$arg]}"
  else
    tmux select-window -t "$arg" 2>/dev/null ||
      tmux new-window -n "$arg" -c "${workspaces[$arg]}"
  fi
}

_exit() {
  [ -z "$TMUX" ] && exit
  if [ $(tmux list-panes | wc -l) -gt 1 ]; then
    tmux kill-pane
  elif [ $(tmux display-message -p '#I') -gt 0 ]; then
    tmux kill-window
  else
    tmux detach
  fi
}
